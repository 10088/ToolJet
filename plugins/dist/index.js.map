{"mappings":";;;;;;;;;;ACAA,EAAsD,AAAtD,oDAAsD;AACtD,EAAwB,AAAxB,sBAAwB;AAExB,GAAG,CAAC,0CAAoB,SAAS,oBAAoB;IACjD,UAAU,CAAC,KAAK,EAAE,CAAC;QACf,MAAM,CAAC,CAAC;YAAC,aAAa,GAAG,OAAO,EAAE,KAAK;YAAI,CAAc,eAAE,CAAkB;QAAC,CAAC;IACnF,CAAC;UACK,GAAG,CAAC,aAAa,EAAE,YAAY,EAAE,YAAY,EAAE,CAAC;QAClD,GAAG,CAAC,MAAM,GAAG,CAAC;QAAA,CAAC;QACf,GAAG,CAAC,QAAQ,GAAG,IAAI;QACnB,KAAK,CAAC,SAAS,GAAG,YAAY,CAAC,SAAS;QACxC,KAAK,CAAC,MAAM,GAAG,YAAY,CAAC,CAAS;QACrC,KAAK,CAAC,SAAS,GAAG,YAAY,CAAC,CAAY;QAC3C,KAAK,CAAC,WAAW,GAAG,aAAa,CAAC,CAAS;QAC3C,EAAQ,AAAR,MAAQ;QACR,EAA2B,AAA3B,yBAA2B;QAC3B,EAAiC,AAAjC,+BAAiC;QACjC,EAA0D,AAA1D,wDAA0D;QAC1D,EAAqD,AAArD,mDAAqD;QACrD,EAA8I,AAA9I,4IAA8I;QAC9I,EAAiC,AAAjC,+BAAiC;QACjC,EAAyD,AAAzD,uDAAyD;QACzD,EAAkB,AAAlB,gBAAkB;QAClB,EAAkD,AAAlD,gDAAkD;QAClD,EAAqB,AAArB,mBAAqB;QACrB,EAAY,AAAZ,UAAY;QACZ,EAAoC,AAApC,kCAAoC;QACpC,EAA0D,AAA1D,wDAA0D;QAC1D,EAAuG,AAAvG,qGAAuG;QACvG,EAAyD,AAAzD,uDAAyD;QACzD,EAAkB,AAAlB,gBAAkB;QAClB,EAAkD,AAAlD,gDAAkD;QAClD,EAAqB,AAArB,mBAAqB;QACrB,EAAY,AAAZ,UAAY;QACZ,EAAkC,AAAlC,gCAAkC;QAClC,EAA2F,AAA3F,yFAA2F;QAC3F,EAAmC,AAAnC,iCAAmC;QACnC,EAAyD,AAAzD,uDAAyD;QACzD,EAA0B,AAA1B,wBAA0B;QAC1B,EAAiC,AAAjC,+BAAiC;QACjC,EAA4B,AAA5B,0BAA4B;QAC5B,EAA6D,AAA7D,2DAA6D;QAC7D,EAAwE,AAAxE,sEAAwE;QACxE,EAA6B,AAA7B,2BAA6B;QAC7B,EAAyB,AAAzB,uBAAyB;QACzB,EAAqB,AAArB,mBAAqB;QACrB,EAAkB,AAAlB,gBAAkB;QAClB,EAAkD,AAAlD,gDAAkD;QAClD,EAAqB,AAArB,mBAAqB;QACrB,EAAY,AAAZ,UAAY;QACZ,EAAkC,AAAlC,gCAAkC;QAClC,EAA2D,AAA3D,yDAA2D;QAC3D,EAAwG,AAAxG,sGAAwG;QACxG,EAAoC,AAApC,kCAAoC;QACpC,EAAyD,AAAzD,uDAAyD;QACzD,EAAkB,AAAlB,gBAAkB;QAClB,EAAkD,AAAlD,gDAAkD;QAClD,EAAqB,AAArB,mBAAqB;QACrB,EAAY,AAAZ,UAAY;QACZ,EAAQ,AAAR,MAAQ;QACR,EAAI,AAAJ,EAAI;QACJ,EAAkB,AAAlB,gBAAkB;QAClB,EAAmC,AAAnC,iCAAmC;QACnC,EAA0E,AAA1E,wEAA0E;QAC1E,EAAI,AAAJ,EAAI;QACJ,MAAM,CAAC,CAAC;YACJ,MAAM,EAAE,CAAI;YACZ,IAAI,EAAE,MAAM;QAChB,CAAC;IACL,CAAC;;IAGL,wCAAoC,GAArB,0CAAoB;;;IDvEnC,wCAEC,GAFc,CAAC;cACd,wCAAQ;AACV,CAAC","sources":["plugins/index.js","plugins/packages/airtable/lib/airtable.js"],"sourcesContent":["import airtable from './packages/airtable/lib/airtable'\nexport default {\n  airtable\n}","// import { QueryError } from 'common/lib/query.error'\n// import got from 'got'\n\nlet AirtableQueryService = class AirtableQueryService {\n    authHeader(token) {\n        return { Authorization: `Bearer ${token}`, 'Content-Type': 'application/json' };\n    }\n    async run(sourceOptions, queryOptions, dataSourceId) {\n        let result = {};\n        let response = null;\n        const operation = queryOptions.operation;\n        const baseId = queryOptions['base_id'];\n        const tableName = queryOptions['table_name'];\n        const accessToken = sourceOptions['api_key'];\n        // try {\n        //     switch (operation) {\n        //         case 'list_records': {\n        //             const pageSize = queryOptions['page_size'];\n        //             const offset = queryOptions['offset'];\n        //             response = await got(`https://api.airtable.com/v0/${baseId}/${tableName}/?pageSize=${pageSize || ''}&offset=${offset || ''}`, {\n        //                 method: 'get',\n        //                 headers: this.authHeader(accessToken),\n        //             });\n        //             result = JSON.parse(response.body);\n        //             break;\n        //         }\n        //         case 'retrieve_record': {\n        //             const recordId = queryOptions['record_id'];\n        //             response = await got(`https://api.airtable.com/v0/${baseId}/${tableName}/${recordId}`, {\n        //                 headers: this.authHeader(accessToken),\n        //             });\n        //             result = JSON.parse(response.body);\n        //             break;\n        //         }\n        //         case 'update_record': {\n        //             response = await got(`https://api.airtable.com/v0/${baseId}/${tableName}`, {\n        //                 method: 'patch',\n        //                 headers: this.authHeader(accessToken),\n        //                 json: {\n        //                     records: [\n        //                         {\n        //                             id: queryOptions['record_id'],\n        //                             fields: JSON.parse(queryOptions['body']),\n        //                         },\n        //                     ],\n        //                 },\n        //             });\n        //             result = JSON.parse(response.body);\n        //             break;\n        //         }\n        //         case 'delete_record': {\n        //             const _recordId = queryOptions['record_id'];\n        //             response = await got(`https://api.airtable.com/v0/${baseId}/${tableName}/${_recordId}`, {\n        //                 method: 'delete',\n        //                 headers: this.authHeader(accessToken),\n        //             });\n        //             result = JSON.parse(response.body);\n        //             break;\n        //         }\n        //     }\n        // }\n        // catch (error) {\n        //     console.log(error.response);\n        //     throw new Error('Query could not be completed', error.message, {});\n        // }\n        return {\n            status: 'ok',\n            data: result,\n        };\n    }\n};\n\nexport default AirtableQueryService;"],"names":[],"version":3,"file":"index.js.map"}